// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShepherdsPies.Data;

#nullable disable

namespace ShepherdsPies.Migrations
{
    [DbContext(typeof(ShepherdsPiesDbContext))]
    partial class ShepherdsPiesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec94e046-0291-40a7-ad95-a343a2733017",
                            Email = "admin@shepherdspies.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SHEPHERDSPIES.COM",
                            NormalizedUserName = "ADMIN@SHEPHERDSPIES.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHM4/chOzmTBL715POFi+iwjCqxyhm107dZjwE+d1NfD5t9oGW08XdJkal8dTMULvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a8188f04-d0bf-4c6a-8911-7fae09850236",
                            TwoFactorEnabled = false,
                            UserName = "admin@shepherdspies.com"
                        },
                        new
                        {
                            Id = "user-id-2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1df08d74-c326-4946-a7d3-e2a0b051222a",
                            Email = "tony@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TONY@EXAMPLE.COM",
                            NormalizedUserName = "TONY@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENbddbRcGHDYX6XZ+42IJLxptwNA3xY1Bp+GeXLF/VQ1x0mg9p08PHCnxvTqjjQjwg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78a94df2-554c-4ac2-baf4-57641efe6404",
                            TwoFactorEnabled = false,
                            UserName = "tony@example.com"
                        },
                        new
                        {
                            Id = "user-id-3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d4d41c33-376b-42b4-80c1-11529b5b69a4",
                            Email = "lucia@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LUCIA@EXAMPLE.COM",
                            NormalizedUserName = "LUCIA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOGYfUSSmxXlqqEhrI3fUb3Y7wPEoWbj6hJhU+zokEDkAJQn/R5OZnCiMs5M1zxe3g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d0e60d5-87e9-48e4-9a46-bbd2df4b9c66",
                            TwoFactorEnabled = false,
                            UserName = "lucia@example.com"
                        },
                        new
                        {
                            Id = "user-id-4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ea843a1-accc-42c8-b3d1-105f3d308f91",
                            Email = "gino@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GINO@EXAMPLE.COM",
                            NormalizedUserName = "GINO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIMiV42ZHXOwV3v+m2KJfzF97ZfmNLNDebY0ePJk/up8QRpNrX21Qfh0nZuDIe+SQg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "83003551-5737-4d43-9ecd-9429049bf904",
                            TwoFactorEnabled = false,
                            UserName = "gino@example.com"
                        },
                        new
                        {
                            Id = "user-id-5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23bd4083-3b46-4a4d-8829-7beda2f05b16",
                            Email = "sofia@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SOFIA@EXAMPLE.COM",
                            NormalizedUserName = "SOFIA@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHhsZuo+0M5jYBA4tiw2BnPWlyYczWCiEQTO6cGOikDbq02TKYr54ynyzKDzKXCOAg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26bc8f12-5dd7-4ad2-b177-160e7bf03f36",
                            TwoFactorEnabled = false,
                            UserName = "sofia@example.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShepherdsPies.Models.Cheese", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cheeses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Buffalo Mozzarella"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Four Cheese"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Vegan"
                        },
                        new
                        {
                            Id = 4,
                            Name = "None"
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DelivererId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderTakerId")
                        .HasColumnType("integer");

                    b.Property<int?>("TableNum")
                        .HasColumnType("integer");

                    b.Property<decimal>("Tip")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("DelivererId");

                    b.HasIndex("OrderTakerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 4, 19, 43, 2, 957, DateTimeKind.Utc).AddTicks(1321),
                            DelivererId = 1,
                            IsDelivered = false,
                            OrderTakerId = 1,
                            TableNum = 3,
                            Tip = 5.00m
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 3, 19, 43, 2, 957, DateTimeKind.Utc).AddTicks(1331),
                            DelivererId = 3,
                            IsDelivered = true,
                            OrderTakerId = 2,
                            TableNum = 5,
                            Tip = 3.00m
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 1, 19, 43, 2, 957, DateTimeKind.Utc).AddTicks(1339),
                            DelivererId = 4,
                            IsDelivered = true,
                            OrderTakerId = 1,
                            TableNum = 7,
                            Tip = 7.50m
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 5, 25, 19, 43, 2, 957, DateTimeKind.Utc).AddTicks(1341),
                            DelivererId = 2,
                            IsDelivered = false,
                            OrderTakerId = 3,
                            TableNum = 2,
                            Tip = 4.25m
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 5, 5, 19, 43, 2, 957, DateTimeKind.Utc).AddTicks(1342),
                            DelivererId = 1,
                            IsDelivered = true,
                            OrderTakerId = 4,
                            TableNum = 1,
                            Tip = 6.00m
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.Pizza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CheeseId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("SauceId")
                        .HasColumnType("integer");

                    b.Property<int>("SizeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CheeseId");

                    b.HasIndex("OrderId");

                    b.HasIndex("SauceId");

                    b.HasIndex("SizeId");

                    b.ToTable("Pizzas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheeseId = 1,
                            OrderId = 1,
                            SauceId = 1,
                            SizeId = 2
                        },
                        new
                        {
                            Id = 2,
                            CheeseId = 2,
                            OrderId = 2,
                            SauceId = 2,
                            SizeId = 1
                        },
                        new
                        {
                            Id = 3,
                            CheeseId = 3,
                            OrderId = 2,
                            SauceId = 3,
                            SizeId = 3
                        },
                        new
                        {
                            Id = 4,
                            CheeseId = 4,
                            OrderId = 3,
                            SauceId = 4,
                            SizeId = 2
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.PizzaTopping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PizzaId")
                        .HasColumnType("integer");

                    b.Property<int>("ToppingId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PizzaId");

                    b.HasIndex("ToppingId");

                    b.ToTable("PizzaToppings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PizzaId = 1,
                            ToppingId = 1
                        },
                        new
                        {
                            Id = 2,
                            PizzaId = 1,
                            ToppingId = 2
                        },
                        new
                        {
                            Id = 3,
                            PizzaId = 2,
                            ToppingId = 3
                        },
                        new
                        {
                            Id = 4,
                            PizzaId = 2,
                            ToppingId = 4
                        },
                        new
                        {
                            Id = 5,
                            PizzaId = 3,
                            ToppingId = 5
                        },
                        new
                        {
                            Id = 6,
                            PizzaId = 3,
                            ToppingId = 6
                        },
                        new
                        {
                            Id = 7,
                            PizzaId = 4,
                            ToppingId = 7
                        },
                        new
                        {
                            Id = 8,
                            PizzaId = 4,
                            ToppingId = 8
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.Sauce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sauces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Marinara"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Arrabbiata"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Garlic White"
                        },
                        new
                        {
                            Id = 4,
                            Name = "None"
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Small"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Large"
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.Topping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Toppings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sausage",
                            Price = 0.50m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pepperoni",
                            Price = 0.50m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mushroom",
                            Price = 0.50m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Onion",
                            Price = 0.50m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Green Pepper",
                            Price = 0.50m
                        },
                        new
                        {
                            Id = 6,
                            Name = "Black Olive",
                            Price = 0.50m
                        },
                        new
                        {
                            Id = 7,
                            Name = "Basil",
                            Price = 0.50m
                        },
                        new
                        {
                            Id = 8,
                            Name = "Extra Cheese",
                            Price = 0.50m
                        });
                });

            modelBuilder.Entity("ShepherdsPies.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "101 Main Street",
                            FirstName = "Admina",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Strator"
                        },
                        new
                        {
                            Id = 2,
                            Address = "22 Pasta Lane",
                            FirstName = "Tony",
                            IdentityUserId = "user-id-2",
                            LastName = "Rigatoni"
                        },
                        new
                        {
                            Id = 3,
                            Address = "303 Olive Blvd",
                            FirstName = "Lucia",
                            IdentityUserId = "user-id-3",
                            LastName = "Marinara"
                        },
                        new
                        {
                            Id = 4,
                            Address = "44 Parmesan Ave",
                            FirstName = "Gino",
                            IdentityUserId = "user-id-4",
                            LastName = "Calzone"
                        },
                        new
                        {
                            Id = 5,
                            Address = "505 Mozzarella Dr",
                            FirstName = "Sofia",
                            IdentityUserId = "user-id-5",
                            LastName = "Pizzetti"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShepherdsPies.Models.Order", b =>
                {
                    b.HasOne("ShepherdsPies.Models.UserProfile", "Deliverer")
                        .WithMany()
                        .HasForeignKey("DelivererId");

                    b.HasOne("ShepherdsPies.Models.UserProfile", "OrderTaker")
                        .WithMany()
                        .HasForeignKey("OrderTakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deliverer");

                    b.Navigation("OrderTaker");
                });

            modelBuilder.Entity("ShepherdsPies.Models.Pizza", b =>
                {
                    b.HasOne("ShepherdsPies.Models.Cheese", "Cheese")
                        .WithMany()
                        .HasForeignKey("CheeseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShepherdsPies.Models.Order", null)
                        .WithMany("Pizzas")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShepherdsPies.Models.Sauce", "Sauce")
                        .WithMany()
                        .HasForeignKey("SauceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShepherdsPies.Models.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cheese");

                    b.Navigation("Sauce");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("ShepherdsPies.Models.PizzaTopping", b =>
                {
                    b.HasOne("ShepherdsPies.Models.Pizza", null)
                        .WithMany("PizzaToppings")
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShepherdsPies.Models.Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("ShepherdsPies.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("ShepherdsPies.Models.Order", b =>
                {
                    b.Navigation("Pizzas");
                });

            modelBuilder.Entity("ShepherdsPies.Models.Pizza", b =>
                {
                    b.Navigation("PizzaToppings");
                });
#pragma warning restore 612, 618
        }
    }
}
